from itertools import combinations

# [xlabel,number of bins,xmin,xmax,whether to keep it in npz for training (0=do not keep, 1=keep as is, 2=keep but make sure the length is the same as AK8 variables), whether to flatten the array or not when filling histogram (2 = ak.flatten(), 1 = .flatten(), 0 = do not flatten)]
variables = {
'eCounter':                               ["h_eCounter",                                        2,    -1.1,    1.1,         0,     0],
'evtw':                                   ["h_evtw",                                            2,    -1.1,    1.1,         0,     0],
'jw':                                     ["h_jw",                                              2,    -1.1,    1.1,         0,     2],
'fjw':                                    ["h_fjw",                                             2,    -1.1,    1.1,         1,     2],
'njets':                                  ["Number of Jets",                                   20,     0.0,    20.0,        2,     0],
'njetsAK8':                               ["Number of AK8Jets",                                20,     0.0,    20.0,        2,     0],
'nb':                                     ["Number of b",                                      10,     0.0,    10.0,        2,     0],
'nl':                                     ["Number of Leptons",                                10,     0.0,    10.0,        2,     0],
'ht':                                     [r"$H_{T}$ (GeV)",                                   500,    0.0,    5000.0,      2,     0],
'st':                                     [r"$S_{T}$ (GeV)",                                   500,    0.0,    5000.0,      2,     0],
'met':                                    ["MET [GeV]",                                        500,    0.0,    2000.0,      2,     0],
'metPhi':                                 [r"MET $\phi$ [GeV]",                                40,    -4.0,    4.0,         0,     0],
# 'madHT':                                  [r"$H_{T}$ (GeV)",                                   500,    0.0,    5000.0,      2,     0],
'jPt':                                    [r"$p_{T}$ [GeV]",                                   200,    0.0,    2000.0,      0,     1],
'jEta':                                   [r"$\eta$",                                          200,   -6.0,    6.0,         0,     1],
'jPhi':                                   [r"$\phi$",                                          200,   -4.0,    4.0,         0,     1],
'jAxismajor':                             [r"$\sigma_{major}(j)$",                             40,     0.0,    0.5,         0,     1],
'jAxisminor':                             [r"$\sigma_{minor}(j)$",                             40,     0.0,    0.3,         0,     1],
'jPtD':                                   ["ptD",                                              40,     0.0,    1.2,         0,     1],
'dPhiMinjMET':                            [r"$\Delta\phi_{min}(j,MET)$",                       100,    0.0,    4.0,         0,     0],
'jPtAK8':                                 [r"$p_{T}$ [GeV]",                                   200,    0.0,    2000.0,      1,     1],
'jEtaAK8':                                [r"$\eta$",                                          200,   -6.0,    6.0,         1,     1],
'jPhiAK8':                                [r"$\phi$",                                          200,   -4.0,    4.0,         1,     1],
'jAxismajorAK8':                          [r"$\sigma_{major}(J)$",                             40,     0.0,    0.5,         1,     1],
'jAxisminorAK8':                          [r"$\sigma_{minor}(J)$",                             40,     0.0,    0.3,         1,     1],
'jChEMEFractAK8':                         ["fChEM(J)",                                         50,     0.0,    1.0,         1,     1],
'jChHadEFractAK8':                        ["fChHad(J)",                                        50,     0.0,    1.0,         1,     1],
'jChHadMultAK8':                          ["nChHad(J)",                                        145,    0.0,    145.0,       1,     1],
'jChMultAK8':                             ["nCh(J)",                                           145,    0.0,    145.0,       1,     1],
'jdoubleBDiscriminatorAK8':               ["doubleBDiscriminator(J)",                          100,    -1.0,   1.0,         1,     1],
'jecfN2b1AK8':                            ["ecfN2b1(J)",                                       50,     0.0,    0.6,         1,     1],
'jecfN2b2AK8':                            ["ecfN2b2(J)",                                       50,     0.0,    0.4,         1,     1],
'jecfN3b1AK8':                            ["ecfN3b1(J)",                                       50,     0.0,    5.0,         1,     1],
'jecfN3b2AK8':                            ["ecfN3b2(J)",                                       50,     0.0,    5.0,         1,     1],
'jEleEFractAK8':                          ["fEle(J)",                                          50,     0.0,    1.0,         1,     1],
'jEleMultAK8':                            ["nEle(J)",                                          8,      0.0,    8.0,         1,     1],
'jGirthAK8':                              ["girth(J)",                                         40,     0.0,    0.5,         1,     1],
'jHfEMEFractAK8':                         ["fHFEM(J)",                                         50,     0.0,    1.0,         1,     1],
'jHfHadEFractAK8':                        ["fHFHad(J)",                                        50,     0.0,    1.0,         1,     1],
'jMultAK8':                               ["mult(J)",                                          250,    0.0,    250.0,       1,     1],
'jMuEFractAK8':                           ["fMu(J)",                                           50,     0.0,    1.0,         1,     1],
'jMuMultAK8':                             ["nMu(J)",                                           8,      0.0,    8.0,         1,     1],
'jNeuEmEFractAK8':                        ["fNeuEM(J)",                                        50,     0.0,    1.0,         1,     1],
'jNeuHadEFractAK8':                       ["fNeuHad(J)",                                       50,     0.0,    1.0,         1,     1],
'jNeuHadMultAK8':                         ["nNeuHad(J)",                                       25,     0.0,    25.0,        1,     1],
'jNeuMultAK8':                            ["nNeu(J)",                                          120,    0.0,    120.0,       1,     1],
'jTau1AK8':                               [r"$\tau_{1}(J)$",                                   40,     0.0,    0.8,         1,     1],
'jTau2AK8':                               [r"$\tau_{2}(J)$",                                   40,     0.0,    0.65,        1,     1],
'jTau3AK8':                               [r"$\tau_{3}(J)$",                                   40,     0.0,    0.35,        1,     1],
'jTau21AK8':                              [r"$\tau_{21}(J)$",                                  40,     0.0,    1.3,         1,     2],
'jTau32AK8':                              [r"$\tau_{32}(J)$",                                  40,     0.0,    1.3,         1,     2],
'jNumBhadronsAK8':                        ["nBHad(J)",                                         30,     0.0,    30.0,        1,     1],
'jNumChadronsAK8':                        ["nCHad(J)",                                         30,     0.0,    30.0,        1,     1],
'jPhoEFractAK8':                          ["fPho(J)",                                          50,     0.0,    1.0,         1,     1],
'jPhoMultAK8':                            ["nPho(J)",                                          110,    0.0,    110.0,       1,     1],
'jPtDAK8':                                ["ptD",                                              40,     0.0,    1.2,         1,     1],
'jSoftDropMassAK8':                       [r"$m_{SD}(J)$",                                     40,     0.0,    200,         1,     1],
'dPhijMETAK8':                            [r"$\Delta\phi(J,MET)$",                             100,    0.0,    4.0,         1,     1],
'dPhiMinjMETAK8':                         [r"$\Delta\phi_{min}(j,MET)$",                       100,    0.0,    4.0,         2,     0],
'mT':                                     [r"$m_{T} (GeV)$",                                   500,    0.0,    5000.0,      2,     0],
'METrHT_pt30':                            [r"$MET/H_{T}$",                                     100,    0.0,    3.0,         2,     0],
'METrST_pt30':                            [r"$MET/S_{T}",                                      100,    0.0,    1.0,         2,     0],
'electronsIso':                           ["electrons iso",                                    100,    0.0,    1.0,         0,     1],
'muonsIso':                               ["muons iso",                                        100,    0.0,    1.0,         0,     1],
# 'mT2_f4_msm':                             [r"$m_{T2} (GeV)$",                                  500,    0.0,    5000.0,      2,     0],
# 'mT2_f4_msm_dEta':                        [r"$m_{T2} (GeV)$",                                  500,    0.0,    5000.0,      2,     0],
# 'mT2_f4_msm_dPhi':                        [r"$m_{T2} (GeV)$",                                  500,    0.0,    5000.0,      2,     0],
# 'mT2_f4_msm_dR':                          [r"$m_{T2} (GeV)$",                                  500,    0.0,    5000.0,      2,     0],
# "GenJetsAK8_hvCategory":                  ["GenJetAK8 hvCategory",                             32,     0.0,    32.0,        0,     1],
"JetsAK8_hvCategory":                     ["JetAK8 hvCategory",                                32,     0.0,    32.0,        1,     2],
# "GenMT2_AK8":                             [r"$m_{T2} (GeV)$",                                  500,    0.0,    5000.0,      0,     0],
# "GenJetsAK8_darkPtFrac":                  ["GenJetAK8 Dark pT Fraction",                       100,    0.0,    1.0,         0,     1],
# 'nsvjJetsAK8':                            ["Number of SVJ AK8Jets",                            20,     0.0,    20.0,        0,     0],
# 'nnOutput':                               ["nnOutput",                                         100,    0.0,    1.0,         0,     1],
}
# preparing histograms for jN variables
maxN = 4
for i in range(maxN):
    jNList = {
        'j{}Pt'.format(i+1):                                   [r"p_{T}(j_"+str(i+1)+") [GeV]",                                200,    0.0,    2000.0,      0,     0],
        'j{}Eta'.format(i+1):                                  [r"$\eta$(j_"+str(i+1)+")",                                     200,   -6.0,    6.0,         0,     0],
        'j{}Phi'.format(i+1):                                  [r"$\phi$(j_"+str(i+1)+")",                                     200,   -4.0,    4.0,         0,     0],
        'j{}Axismajor'.format(i+1):                            [r"$\sigma_{major}(j_"+str(i+1)+")$",                           40,     0.0,    0.5,         0,     0],
        'j{}Axisminor'.format(i+1):                            [r"$\sigma_{minor}(j_"+str(i+1)+")$",                           40,     0.0,    0.3,         0,     0],
        'j{}PtD'.format(i+1):                                  ["ptD(j_"+str(i+1)+")",                                         40,     0.0,    1.2,         0,     0],
        'dPhij{}MET'.format(i+1):                              [r"$\Delta\phi(j_{"+str(i+1)+"},MET)$",                         100,    0.0,    4.0,         0,     0],
        'j{}PtAK8'.format(i+1):                                [r"p_{T}(J_"+str(i+1)+") [GeV]",                                200,    0.0,    2000.0,      2,     0],
        'j{}EtaAK8'.format(i+1):                               [r"$\eta$(J_"+str(i+1)+")",                                     200,   -6.0,    6.0,         2,     0],
        'j{}PhiAK8'.format(i+1):                               [r"$\phi$(J_"+str(i+1)+")",                                     200,   -4.0,    4.0,         2,     0],
        'j{}AxismajorAK8'.format(i+1):                         [r"$\sigma_{major}(J_"+str(i+1)+")$",                           40,     0.0,    0.5,         2,     0],
        'j{}AxisminorAK8'.format(i+1):                         [r"$\sigma_{minor}(J_"+str(i+1)+")$",                           40,     0.0,    0.3,         2,     0],
        'j{}GirthAK8'.format(i+1):                             ["girth(J_"+str(i+1)+")",                                       40,     0.0,    0.5,         2,     0],
        'j{}PtDAK8'.format(i+1):                               ["ptD(J_"+str(i+1)+")",                                         40,     0.0,    1.2,         2,     0],
        'j{}Tau1AK8'.format(i+1):                              [r"$\tau_{1}(J_"+str(i+1)+")$",                                 40,     0.0,    0.8,         2,     0],
        'j{}Tau2AK8'.format(i+1):                              [r"$\tau_{2}(J_"+str(i+1)+")$",                                 40,     0.0,    0.65,        2,     0],
        'j{}Tau3AK8'.format(i+1):                              [r"$\tau_{3}(J_"+str(i+1)+")$",                                 40,     0.0,    0.35,        2,     0],
        'j{}Tau21AK8'.format(i+1):                             [r"$\tau_{21}(J_"+str(i+1)+")$",                                40,     0.0,    1.3,         2,     0],
        'j{}Tau32AK8'.format(i+1):                             [r"$\tau_{32}(J_"+str(i+1)+")$",                                40,     0.0,    1.3,         2,     0],
        'j{}SoftDropMassAK8'.format(i+1):                      [r"$m_{SD}(J_"+str(i+1)+")$",                                   40,     0.0,    200,         2,     0],
        'dPhij{}METAK8'.format(i+1):                           [r"$\Delta\phi(J_{"+str(i+1)+"},MET)$",                         100,    0.0,    4.0,         2,     0],
    }
    variables.update(jNList)

allComs = list(combinations(range(maxN),2))
for com in allComs:
    j1 = com[0]+1
    j2 = com[1]+1
    jNjMList = {
        'dEtaj{}{}'.format(j1,j2):                             [r"$\Delta\eta(j_{"+str(j1)+"},j_{"+str(j2)+"})$",                       200,    0.0,    5.0,         0,     0],
        'dPhij{}{}'.format(j1,j2):                             [r"$\Delta\phi(j_{"+str(j1)+"},j_{"+str(j2)+"})$",                       100,    0.0,    4.0,         2,     0],
        'dRj{}{}'.format(j1,j2):                               [r"$\Delta R(j_{"+str(j1)+"},j_{"+str(j2)+"})$",                         100,    0.0,    6.0,         0,     0],
        'dPhij{}rdPhij{}'.format(j1,j2):                       [r"$\Delta\phi(j_{"+str(j1)+"},MET)/\Delta\phi(j_{"+str(j2)+"},MET)$",   100,    0.0,    100.0,       0,     0],
        'dEtaj{}{}AK8'.format(j1,j2):                          [r"$\Delta\eta(J_{"+str(j1)+"},J_{"+str(j2)+"})$",                       200,    0.0,    5.0,         2,     0],
        'dPhij{}{}AK8'.format(j1,j2):                          [r"$\Delta\phi(J_{"+str(j1)+"},J_{"+str(j2)+"})$",                       100,    0.0,    4.0,         2,     0],
        'dRj{}{}AK8'.format(j1,j2):                            [r"$\Delta R(J_{"+str(j1)+"},J_{"+str(j2)+"})$",                         100,    0.0,    6.0,         2,     0],
        'dPhij{}rdPhij{}AK8'.format(j1,j2):                    [r"$\Delta\phi(J_{"+str(j1)+"},MET)/\Delta\phi(J_{"+str(j2)+"},MET)$",   100,    0.0,    100.0,       2,     0],
    }
    variables.update(jNjMList)
